// Полезные ссылки
// =================================================================================================================== //
https://stackoverflow.com/questions/13870845/converting-from-an-integer-to-its-binary-representation
https://golang.org/pkg/encoding/hex/
https://stackoverflow.com/questions/40308476/how-do-i-get-the-bits-from-a-byte-in-golang
https://programming.guide/go/read-file-to-string.html
https://stackoverflow.com/questions/14514201/how-to-read-a-binary-file-in-go
https://stackoverflow.com/questions/17133590/how-to-get-file-length-in-go
https://stackoverflow.com/questions/40308476/how-do-i-get-the-bits-from-a-byte-in-golang
https://stackoverflow.com/questions/14514201/how-to-read-a-binary-file-in-go#
https://perlmaven.com/what-is-a-text-file
https://www.devdungeon.com/content/working-files-go
https://habr.com/post/251295/
// =================================================================================================================== //

Создание собственного архиватора:

1: Преобразование файла в биты
2: Определение повторяющихся битов файла
3: Сикращение количества битов
4: сохранение нового файла 


| 00 | 11 | 01 | 10 | ^^ | ** |
| -  | +  | *  | ^  | !  | ?  |

++: @
--: #

Пример: биты текстового файла 

1000001100000110001011010011101110110000111100101111001100000110011011010011101100110010110000011010011110011100000110000110000011000111101111110110111100001110101111010011001011110010100000110011011010011101100110010110000011101001101000110000111101001000001101001111001110000011011101101111111010010000011000011000001110100110010111110001110100100000110011011010011101100110010110111010000010101001101000110010110000011101001100101111001011011011000001000101100010110100111011101100001111001011110011000001100110110100111011001100101100010100000110100111100111000001101111110011011101001100101110111010000011101011110011110010111001001000001100001111001110000011000011000001110100110010111100101101101100000110110111001011100001110111011010011101110110011110000010001011011101101111110111010110111101001100101111100011101001000001100110110100111011001100101100010101110100000100110111000011101110111100110000011000101101001110111011000011110010111100110000011001101101001110110011001011000001100110110111111100101101101110000111101001110011100000110001111011111101110111010011000011101001110111010000011100001100001111001011101001110011100000111010011010001100001111010010000011000111100001110111010000011000101100101100000110100111011101110100110010111100101110000111001011001011110100110010111001001000001100001111001110000011101001100101111100011101001110111000001100110110111111100101000001100101111100011000011101101111000011011001100101101100100000111001111011111101101110010110000011000111101111110110111100001110101111010011001011110010100000110010011011111100011111010111011011100101110111011101001000001100110110100111011001100101111001110000011000111101111110111011101001100001110100111011101101001110111011001111000001100110110111111100101101101110000111101001110100110010111001001000001110100110010111110001110100101100100000111001111101011100011110100010000011000011110011100000110111111011001100100110010111100101000001001101110100111000111110010110111111100111101111110011011101001000001010111110111111100101100100100000110010011011111100011111010111011011100101110111011101001000001100110110100111011001100101111001110110010000011000111101111110111011101001100001110100111011101000001110100110100011001011000001110100110010111110001110100100000110111111001101000001110100110100011001011000001100100110111111000111110101110110111001011101110111010010000011000101110101111010010000011000011101100111001111011111000001100011110111111011101110100110000111010011101110100000110011011011111110010110110111000011110100111010011010011101110110011110000011010011101110110011011011111110010110110111000011110100110100111011111101110100000110100111011101000001100010110100111011101100001111001011110011000001100110110111111100101101101101110